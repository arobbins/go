{
  "name": "gulp-express",
  "version": "0.1.4",
  "description": "gulp plugin for express, connect",
  "homepage": "https://github.com/gimm/gulp-express",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "keywords": [
    "gulp",
    "express",
    "livereload",
    "server"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/gimm/gulp-express"
  },
  "author": {
    "name": "yucc2008@gmail.com"
  },
  "license": "ISC",
  "dependencies": {
    "deepmerge": "~0.2.7",
    "tiny-lr": "0.0.9"
  },
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/gimm/gulp-express/issues"
  },
  "dist": {
    "shasum": "6fe9e9beae87dc49c9fd8da4de3f3ecc4f8d729a"
  },
  "devDependencies": {},
  "readme": "# Gulp plugin for express\r\n\r\n## Description\r\nThis plugin is simple using a child process to let you run node command, thus, it can start your customized server you have.\r\nThe most commonly usage might be like this:\r\n\r\n*Issues with the output should be reported on the gulp-express [issue tracker](https://github.com/gimm/gulp-express/issues).*\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install --save-dev gulp-express\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\n// gulpfile.js\r\nvar gulp = require('gulp');\r\nvar server = require('gulp-express');\r\n\r\ngulp.task('server', function () {\r\n    // Start the server at the beginning of the task\r\n    server.run({\r\n        file: 'app.js'\r\n    });\r\n    \r\n    // Restart the server when file changes\r\n    gulp.watch(['app/**/*.html'], server.notify);\r\n    gulp.watch(['app/styles/**/*.scss'], ['styles:scss']);\r\n    //gulp.watch(['{.tmp,app}/styles/**/*.css'], ['styles:css', server.notify]);\r\n    //Event object won't pass down to gulp.watch's callback if there's more than one of them.\r\n    //So the correct way to use server.notify is as following:\r\n    gulp.watch(['{.tmp,app}/styles/**/*.css'], function(){\r\n        gulp.run('styles:css');\r\n        server.notify(event);\r\n    });\r\n    gulp.watch(['app/scripts/**/*.js'], ['jshint']);\r\n    gulp.watch(['app/images/**/*'], server.notify);\r\n    gulp.watch(['app.js', 'routes/**/*.js'], [server.run]);\r\n});\r\n```\r\n```js\r\n// app.js\r\nvar express = require('express');\r\nvar app = module.exports.app = exports.app = express();\r\napp.use(require('connect-livereload')());\r\n```\r\n\r\n## API\r\n\r\n### server.run([options])\r\nRun or re-run the script file, which will create a server, a express server in most of the case, probably.\r\nReturns a [ChildProcess](http://nodejs.org/api/child_process.html#child_process_class_childprocess) instance of spawned server.\r\n\r\n#### options\r\nType: `Object`\r\n\r\nOptions to pass to gulp-express:\r\n* `env` NONE_ENV value of child process. Default: `'development'`.\r\n* `file` Application entry point file. Default: `'app.js'`.\r\n* `port` LiveReload server port. Default: `35729`.\r\n* `args` Arguments array to pass to `node` process. For example: `['--debug']`. Empty by default.\r\n* `envVars` Object Environment key-value pairs merged into `process.env`. Empty by default.\r\n\r\n### server.stop()\r\nStop the instantiated spawned server programmatically. Useful to run acceptance tests during CI process.\r\n\r\n### server.notify(event)\r\nSend a notification to the livereload server in order to trigger a reload on page.\r\n\r\n#### event\r\nType: `Object`\r\n\r\nEvent object that is normally passed to [gulp.watch](https://github.com/gulpjs/gulp/blob/master/docs/API.md#cbevent) callback.\r\nShould contain `path` property with changed file path.\r\n",
  "_id": "gulp-express@0.1.4",
  "_from": "gulp-express@",
  "_resolved": "https://registry.npmjs.org/gulp-express/-/gulp-express-0.1.4.tgz"
}
